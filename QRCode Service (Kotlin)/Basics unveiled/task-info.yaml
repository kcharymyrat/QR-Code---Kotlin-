type: edu
files:
  - name: src/qrcodeapi/controller/QRCodeRestController.kt
    visible: true
    text: |
      package qrcodeapi.controller
      
      import org.springframework.http.HttpStatus
      import org.springframework.http.ResponseEntity
      import org.springframework.web.bind.annotation.GetMapping
      import org.springframework.web.bind.annotation.RestController
      
      @RestController
      class QRCodeRestController {
      
          @GetMapping(path = ["/"])
          fun hello() = ResponseEntity("Hello World", HttpStatus.OK);
      }
    learner_created: false
  - name: src/qrcodeapi/Application.kt
    visible: true
    text: |
      package qrcodeapi
      
      import org.springframework.boot.autoconfigure.SpringBootApplication
      import org.springframework.boot.runApplication
      
      @SpringBootApplication
      class QRCodeApplication
      
      fun main(args: Array<String>) {
          runApplication<QRCodeApplication>(*args)
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |
      server.port=8080
    learner_created: false
  - name: test/QRCodeApiTest.java
    visible: false
    text: "import org.hyperskill.hstest.dynamic.DynamicTest;\nimport org.hyperskill.hstest.exception.outcomes.WrongAnswer;\n\
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;\nimport org.hyperskill.hstest.stage.SpringTest;\n\
    import org.hyperskill.hstest.testcase.CheckResult;\n\npublic class QRCodeApiTest\
    \ extends SpringTest {\n\n    @DynamicTest\n    CheckResult testGetHealth() {\n\
    \        var url = \"/api/health\";\n        HttpResponse response = get(url).send();\n\
    \n        checkStatusCode(\n            response.getRequest().getEndpoint(),\n\
    \            response.getStatusCode(),\n            200);\n\n        return CheckResult.correct();\n\
    \    }\n\n    @DynamicTest\n    CheckResult testGetQrCode() {\n        var url\
    \ = \"/api/qrcode\";\n        HttpResponse response = get(url).send();\n\n   \
    \     checkStatusCode(\n            response.getRequest().getEndpoint(),\n   \
    \         response.getStatusCode(),\n            501);\n\n        return CheckResult.correct();\n\
    \    }\n\n    private void checkStatusCode(String endpoint, int actual, int expected)\
    \ {\n        if (actual != expected) {\n            throw new WrongAnswer(\"\"\
    \"\n                    Request: GET %s\n                                    \
    \    \n                    Response has incorrect status code:\n             \
    \       Expected %d, but responded with %d\n                                 \
    \       \n                    \"\"\".formatted(endpoint, expected, actual)\n \
    \                   );\n        }\n    }\n}\n"
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
      
      buildscript {
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$hs.kotlin.version"
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
              classpath "org.jetbrains.kotlin:kotlin-allopen:$hs.kotlin.version"
              classpath "org.jetbrains.kotlin:kotlin-noarg:$hs.kotlin.version"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'kotlin'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      apply plugin: "kotlin-spring"
      apply plugin: "kotlin-jpa"
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
          implementation 'org.jetbrains.kotlin:kotlin-reflect'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
      
      tasks.withType(KotlinCompile) {
          kotlinOptions {
              freeCompilerArgs = ['-Xjsr305=strict']
              jvmTarget = "$hs.kotlin.javaVersion"
          }
      }
    learner_created: false
feedback_link: https://hyperskill.org/projects/414/stages/2420/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 19 May 2024 05:47:24 UTC"
record: 1
