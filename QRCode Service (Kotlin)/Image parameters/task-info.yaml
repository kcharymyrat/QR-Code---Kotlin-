type: edu
files:
  - name: src/qrcodeapi/controller/QRCodeRestController.kt
    visible: true
    text: |
      package qrcodeapi.controller
      
      import org.springframework.http.HttpStatus
      import org.springframework.http.ResponseEntity
      import org.springframework.web.bind.annotation.GetMapping
      import org.springframework.web.bind.annotation.RestController
      
      @RestController
      class QRCodeRestController {
      
          @GetMapping(path = ["/"])
          fun hello() = ResponseEntity("Hello World", HttpStatus.OK);
      }
    learner_created: false
  - name: src/qrcodeapi/Application.kt
    visible: true
    text: |
      package qrcodeapi
      
      import org.springframework.boot.autoconfigure.SpringBootApplication
      import org.springframework.boot.runApplication
      
      @SpringBootApplication
      class QRCodeApplication
      
      fun main(args: Array<String>) {
          runApplication<QRCodeApplication>(*args)
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |
      server.port=8080
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
      
      buildscript {
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$hs.kotlin.version"
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
              classpath "org.jetbrains.kotlin:kotlin-allopen:$hs.kotlin.version"
              classpath "org.jetbrains.kotlin:kotlin-noarg:$hs.kotlin.version"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'kotlin'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      apply plugin: "kotlin-spring"
      apply plugin: "kotlin-jpa"
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
          implementation 'org.jetbrains.kotlin:kotlin-reflect'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
      
      tasks.withType(KotlinCompile) {
          kotlinOptions {
              freeCompilerArgs = ['-Xjsr305=strict']
              jvmTarget = "$hs.kotlin.javaVersion"
          }
      }
    learner_created: false
  - name: test/QRCodeApiTest.java
    visible: false
    text: "import org.hyperskill.hstest.dynamic.DynamicTest;\nimport org.hyperskill.hstest.dynamic.input.DynamicTesting;\n\
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;\nimport org.hyperskill.hstest.mocks.web.response.HttpResponse;\n\
    import org.hyperskill.hstest.stage.SpringTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    \nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\
    import java.util.Objects;\n\nimport static org.hyperskill.hstest.testing.expect.Expectation.expect;\n\
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;\n\
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;\n\
    \npublic class QRCodeApiTest extends SpringTest {\n    private static final String\
    \ BAD_SIZE_MSG = \"Image size must be between 150 and 350 pixels\";\n    private\
    \ static final String BAD_TYPE_MSG = \"Only png, jpeg and gif image types are\
    \ supported\";\n\n    CheckResult testGetHealth() {\n        var url = \"/api/health\"\
    ;\n        HttpResponse response = get(url).send();\n\n        checkStatusCode(response,\
    \ 200);\n\n        return CheckResult.correct();\n    }\n\n    CheckResult testGetQrCode(int\
    \ size, String imgType, String expectedHash) {\n        var url = \"/api/qrcode?size=%d&type=%s\"\
    .formatted(size, imgType);\n        HttpResponse response = get(url).send();\n\
    \n        checkStatusCode(response, 200);\n        checkContentType(response,\
    \ imgType);\n\n        var contentHash = getMD5Hash(response.getRawContent());\n\
    \        if (!contentHash.equals(expectedHash)) {\n            return CheckResult.wrong(\"\
    \"\"\n                    Response: GET %s\n                     \n          \
    \          Response body does not contain a correct image:\n                 \
    \   Expected image hash %s, but was %s\n                    Make sure the size,\
    \ the contents and the format of the image are correct.\n                    \n\
    \                    \"\"\".formatted(url, expectedHash, contentHash)\n      \
    \      );\n        }\n\n        return CheckResult.correct();\n    }\n\n    CheckResult\
    \ testGetQrCodeInvalidParams(int size, String imgType, String message) {\n   \
    \     var url = \"/api/qrcode?size=%d&type=%s\".formatted(size, imgType);\n  \
    \      HttpResponse response = get(url).send();\n\n        checkStatusCode(response,\
    \ 400);\n        checkErrorMessage(response, message);\n\n        return CheckResult.correct();\n\
    \    }\n\n    @DynamicTest\n    DynamicTesting[] tests = {\n            this::testGetHealth,\n\
    \n            () -> testGetQrCode(150, \"png\", \"b67a6f17fe353b997585e65e2903ab7b\"\
    ),\n            () -> testGetQrCode(350, \"jpeg\", \"f614890233a60b13e8e40c7ff554a92c\"\
    ),\n            () -> testGetQrCode(250, \"gif\", \"cc9d9b226e2fab856cb5d008c94c5475\"\
    ),\n\n            () -> testGetQrCodeInvalidParams(99, \"gif\", BAD_SIZE_MSG),\n\
    \            () -> testGetQrCodeInvalidParams(351, \"png\", BAD_SIZE_MSG),\n \
    \           () -> testGetQrCodeInvalidParams(451, \"webp\", BAD_SIZE_MSG),\n \
    \           () -> testGetQrCodeInvalidParams(200, \"tiff\", BAD_TYPE_MSG)\n  \
    \  };\n\n    private void checkStatusCode(HttpResponse response, int expected)\
    \ {\n        var endpoint = response.getRequest().getEndpoint();\n        var\
    \ actual = response.getStatusCode();\n        if (actual != expected) {\n    \
    \        throw new WrongAnswer(\"\"\"\n                    Request: GET %s\n \
    \                   \n                    Response has incorrect status code:\n\
    \                    Expected %d, but responded with %d\n                    \n\
    \                    \"\"\".formatted(endpoint, expected, actual)\n          \
    \  );\n        }\n    }\n\n    private void checkContentType(HttpResponse response,\
    \ String imgType) {\n        var endpoint = response.getRequest().getEndpoint();\n\
    \        var expected = \"image/\" + imgType;\n        var actual = response.getHeaders().get(\"\
    Content-Type\");\n        if (!Objects.equals(expected, actual)) {\n         \
    \   throw new WrongAnswer(\"\"\"\n                    Request: GET %s\n      \
    \              \n                    Response has incorrect 'Content-Type' header:\n\
    \                    Expected \"%s\" but responded with \"%s\"\n             \
    \       \n                    \"\"\".formatted(endpoint, expected, actual)\n \
    \           );\n        }\n    }\n\n    private void checkErrorMessage(HttpResponse\
    \ response, String message) {\n        var endpoint = response.getRequest().getEndpoint();\n\
    \        if (!response.getJson().isJsonObject()) {\n            throw new WrongAnswer(\"\
    \"\"\n                    Request: GET %s\n                    \n            \
    \        Response contains a wrong object:\n                    Expected JSON\
    \ but responded with %s\n                    \n                    \"\"\".formatted(endpoint,\
    \ response.getContent().getClass())\n            );\n        }\n\n        expect(response.getContent()).asJson().check(\n\
    \                isObject().value(\"error\", isString(message))\n        );\n\
    \    }\n\n    private String getMD5Hash(byte[] rawContent) {\n        try {\n\
    \            var md = MessageDigest.getInstance(\"MD5\");\n            var hash\
    \ = md.digest(rawContent);\n            var hexString = new StringBuilder();\n\
    \            for (byte b : hash) {\n                hexString.append(\"%02x\"\
    .formatted(b));\n            }\n            return hexString.toString();\n   \
    \     } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n\
    \        }\n    }\n}\n"
    learner_created: false
  - name: src/qrcodeapi/services/QRCodeImageGeneratorService.kt
    visible: true
    text: |-
      package qrcodeapi.services
      
      import org.springframework.stereotype.Service
      import java.awt.Color
      import java.awt.image.BufferedImage
      
      @Service
      class QRCodeImageGeneratorService {
      
          fun generateQRCOdeBufferedImage(width:Int, height: Int): BufferedImage {
              val image = BufferedImage(width, height, BufferedImage.TYPE_INT_RGB)
              val graphics = image.createGraphics()
      
              graphics.color = Color.WHITE
              graphics.fillRect(0, 0, width, height)
              return image
          }
      }
    learner_created: true
  - name: src/qrcodeapi/configs/QRCodeConfigurations.kt
    visible: true
    text: |-
      package qrcodeapi.configs
      
      import org.springframework.context.annotation.Bean
      import org.springframework.context.annotation.Configuration
      import org.springframework.http.converter.BufferedImageHttpMessageConverter
      import org.springframework.http.converter.HttpMessageConverter
      import java.awt.image.BufferedImage
      
      @Configuration
      class QRCodeConfigurations {
          @Bean
          fun bufferedImageHttpMessageConverter(): HttpMessageConverter<BufferedImage> {
              return BufferedImageHttpMessageConverter();
          }
      }
    learner_created: true
  - name: src/qrcodeapi/custom_error/CustomError.kt
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/projects/414/stages/2422/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 19 May 2024 09:31:33 UTC"
record: -1
